# -*- coding: utf8 -*-
import random
from functools import reduce
from itertools import cycle, count
from sys import argv


# Практическое задание
# 1 Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
def func_count(*args):
    output_in_hours, rate_per_hour, bonus = args
    try:
        salary = (int(output_in_hours) * float(rate_per_hour)) + float(bonus)
    except ValueError:
        print(f'{args} Одно или несколько аргументов не числа. Посчитать не получится.')
    except Exception as ex:
        print(f'Ошибка которую я ещё не описал: {ex}')
    else:
        return salary


try:
    print(f'Жалование: {func_count(argv[1], argv[2], argv[3])}')
except IndexError:
    print(f'{argv} Не нехватает аргументов. Посчитать не получится.')
except Exception as ex:
    print(f'Ошибка запуска которую я ещё не описал: {ex}')

# 2 Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
my_range = 20

list_numbers = [random.randint(-20, 200) for i in range(my_range)]
print('значения которых больше предыдущего элемента START->', list_numbers)
new_list = []
for i in range(my_range - 1):
    if list_numbers[i + 1] > list_numbers[i]:
        new_list.append(list_numbers[i + 1])

print('значения которых больше предыдущего элемента FINISH->', new_list)

# 3 Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print('20 или 21', [i for i in range(20, 240) if (i % 20) == 0 or (i % 21) == 0])

# 4 Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
list_numbers = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]  # [random.randint(0, 10) for i in range(20)]
print('не имеющие повторений, начало', list_numbers)
print('не имеющие повторений,  конец', [list_numbers[index] for index in range(len(list_numbers)) if not (
        list_numbers[index] in (list_numbers[0:index] + list_numbers[index + 1:]))])

# 5 Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

list_numbers = [i for i in range(100, 1001, 2)]
print('формирование списка, используя функцию range()', list_numbers)
print("Какое то огромное число", reduce(lambda prev_el, el: prev_el * el, list_numbers))

# 6 Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

stop_number = 20
number = input(f'Введите число для первого генератора до {stop_number}\n')
if not number.isnumeric():
    print("Число не число\n")
    exit(0)
for i in count(int(number)):
    if i <= stop_number:
        print(i)
    else:
        break

i = 0
for sim in cycle("R;idDSA"):
    if i > stop_number:
        break
    print(sim)
    i += 1

# 7 Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

num_for_fact = 6


def fact(n):
    for i in count(1):
        if i > n:
            break
        yield i


num_fact = 1
for el in fact(num_for_fact):
    num_fact *= el

print(f'factorial({num_for_fact}) = {num_fact}')
